// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

contract InvestmentPlatform is ReentrancyGuard {
    address public admin;
    ERC20 public token;

    uint256 public constant MAX_REFERRAL_LIMIT = 3;
    uint256 public constant MIN_STAKING_AMOUNT = 100 ether;
    uint256 public multiplier = 10**18;
    uint256 public constant STAKING_DURATION = 60 minutes;
    uint256 public constant MAX_WITHDRAWAL_MULTIPLIER = 3;
    uint256 public constant REWARD_PERCENTAGE_PER_SECOND = 5e15; // 0.5% in 18 decimals
    uint256 public constant WITHDRAWAL_FEE_PERCENTAGE = 10; // 10% withdrawal fee
    uint256 public constant DIRECT_SPONSOR_INCOME_PERCENTAGE = 5;

    uint256 public userCountInThePlatform;

    struct UserStaking {
        uint256 stakedAmount;
        uint256 stakingEndTime;
        uint256 startDate;
        uint256 totalWithdrawn;
        uint256 lastClaimTime;
    }

    struct Rewards {
        uint256 totalRewards;
        uint256 dailyRewards;
        uint256 lastClaimTime;
    }

    struct User_children {
        address[] child;
    }

    mapping(address => UserStaking[]) public userStaking;
    mapping(address => uint) public totalInvestedAmount;
    mapping(address => Rewards) public userRewards;
    mapping(address => Rewards) public userReferralRewards;
    mapping(address => address) public parent;
    mapping(address => User_children) private referrerToDirectChildren;
    mapping(address => User_children) private referrerToIndirectChildren;
    mapping(uint => mapping(address => address[])) public levelUsers;
    mapping(uint => mapping(address => uint)) public levelCountUsers;
    mapping(address => uint256) public maxTierReferralCounts;
    mapping(address => uint256) public rewardAmount;
    mapping(address => bool) public userValidation;
    mapping(address => bool) public blacklist;
    mapping(address => bool) public whitelist;

    event TokensStaked(address indexed user, uint256 amount, uint256 endTime);
    event RewardsClaimed(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount, uint256 fees);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    modifier notBlacklisted(address _user) {
        require(!blacklist[_user], "User is blacklisted");
        _;
    }

    modifier whitelisted(address _user) {
        require(whitelist[_user], "User is not whitelisted");
        _;
    }

    constructor(address _tokenAddress) {
        token = ERC20(_tokenAddress);
        admin = msg.sender;
    }

    function deposit() external payable {
        require(msg.value >= MIN_STAKING_AMOUNT, "Minimum deposit amount is 100 USDT");
        if (!userValidation[msg.sender]) {
            userCountInThePlatform++;
            userValidation[msg.sender] = true;
        }
        // Convert deposited ETH to ERC20 tokens
        uint256 tokenAmount = msg.value * multiplier;
        token.transferFrom(msg.sender, address(this), tokenAmount);
        // Stake the tokens
        stakeTokens(tokenAmount, msg.sender);
    }

    function stakeTokens(uint256 tokenAmount, address referrer) public nonReentrant notBlacklisted(msg.sender) {
        require(tokenAmount >= MIN_STAKING_AMOUNT, "Amount needs to be at least 100");
        require(msg.sender != admin, "Admin cannot stake");

        if (parent[msg.sender] == address(0)) {
            emit TokensStaked(msg.sender, 0, 11);
            parent[msg.sender] = referrer;
            emit TokensStaked(msg.sender, 0, 0);
          //  setDirectAndIndirectUsers(msg.sender, referrer);
            emit TokensStaked(msg.sender, 0, 1);
            setLevelUsers(msg.sender, referrer);
            emit TokensStaked(msg.sender, 0, 2);
        } else {
            require(referrer == parent[msg.sender], "Referrer must be the same");
        }

        uint256 stakingEndTime = block.timestamp + STAKING_DURATION;
        uint256 startDate = block.timestamp;

        UserStaking memory newStake = UserStaking({
            stakedAmount: tokenAmount,
            stakingEndTime: stakingEndTime,
            startDate: startDate,
            totalWithdrawn: 0,
            lastClaimTime: block.timestamp
        });

        userStaking[msg.sender].push(newStake);
        totalInvestedAmount[msg.sender] += tokenAmount;

        token.transferFrom(msg.sender, address(this), tokenAmount);

        emit TokensStaked(msg.sender, tokenAmount, stakingEndTime);
    }

    function updateRewards(address user) internal {
        UserStaking[] storage stakes = userStaking[user];
        Rewards storage rewards = userRewards[user];

        for (uint256 i = 0; i < stakes.length; i++) {
            if (block.timestamp > stakes[i].stakingEndTime) {
                uint256 stakingDuration = stakes[i].stakingEndTime - stakes[i].startDate;
                uint256 secondsSinceLastClaim = block.timestamp - stakes[i].lastClaimTime;

                // Calculate rewards per second and update total and daily rewards
                uint256 rewardPerSecond = (stakes[i].stakedAmount * REWARD_PERCENTAGE_PER_SECOND) / 1e18;
                uint256 totalReward = rewardPerSecond * secondsSinceLastClaim;

                rewards.totalRewards += totalReward;
                rewards.dailyRewards += totalReward;

                stakes[i].lastClaimTime = block.timestamp; // Update last claim time
                stakes[i].stakingEndTime = block.timestamp; // Reset staking end time to the current time
            }
        }
    }

    function claimRewards() public nonReentrant notBlacklisted(msg.sender) whitelisted(msg.sender) {
        updateRewards(msg.sender);

        Rewards storage rewards = userRewards[msg.sender];
        uint256 claimableRewards = rewards.totalRewards;
        require(claimableRewards > 0, "No rewards to claim");

        rewards.totalRewards = 0;
        rewards.lastClaimTime = block.timestamp;

        token.transfer(msg.sender, claimableRewards);

        emit RewardsClaimed(msg.sender, claimableRewards);
    }

    function withdraw(uint256 amount) public nonReentrant notBlacklisted(msg.sender) whitelisted(msg.sender) {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(amount <= userRewards[msg.sender].totalRewards, "Insufficient rewards");

        uint256 withdrawalFees = (amount * WITHDRAWAL_FEE_PERCENTAGE) / 100;
        uint256 withdrawableAmount = amount - withdrawalFees;

        require(withdrawableAmount <= userRewards[msg.sender].totalRewards, "Insufficient rewards after fees");
        require(withdrawableAmount <= (totalInvestedAmount[msg.sender] * MAX_WITHDRAWAL_MULTIPLIER), "Exceeds withdrawal limit");

        userRewards[msg.sender].totalRewards -= amount;

        uint256 totalAmount = amount + withdrawalFees;
        require(token.balanceOf(address(this)) >= totalAmount, "Insufficient contract balance");

        token.transfer(msg.sender, withdrawableAmount);
        token.transfer(admin, withdrawalFees);

        emit Withdrawal(msg.sender, amount, withdrawalFees);
    }

    function calculateRewards(address user, uint256 index) internal view returns (uint256) {
        UserStaking storage staking = userStaking[user][index];
        uint256 totalRewards = userRewards[user].totalRewards;

        if (block.timestamp > staking.stakingEndTime) {
            uint256 stakingDuration = staking.stakingEndTime - staking.startDate;
            uint256 reward = (staking.stakedAmount * REWARD_PERCENTAGE_PER_SECOND * stakingDuration) / 1e18;
            totalRewards += reward;
        }

        return totalRewards;
    }

    function totalReferralRewards(address user) public view returns (uint256) {
        return userReferralRewards[user].totalRewards;
    }

    function setDirectAndIndirectUsers(address _user, address _referrer) internal {
        referrerToDirectChildren[_referrer].child.push(_user);
        setIndirectUsersRecursive(_user, _referrer);
    }

    function setIndirectUsersRecursive(address _user, address _referrer) internal {
        while (_referrer != admin) {
            address presentReferrer = parent[_referrer];
            referrerToIndirectChildren[presentReferrer].child.push(_user);
            _referrer = presentReferrer;
        }
    }

    function setLevelUsers(address _user, address _referrer) internal {
        address currentReferrer = _referrer;
        for (uint i = 1; i <= 15; i++) {
            levelUsers[i][currentReferrer].push(_user);
            levelCountUsers[i][currentReferrer]++;
            if (currentReferrer == admin) {
                break;
            } else {
                currentReferrer = parent[currentReferrer];
            }
        }
    }

    function showAllDirectChild(address user) external view returns (address[] memory) {
        address[] memory children = referrerToDirectChildren[user].child;

        return children;
    }

    function showAllInDirectChild(address user) external view returns (address[] memory) {
        address[] memory children = referrerToIndirectChildren[user].child;

        return children;
    }

    function totalRewardsReceived(address userAddress) public view returns (uint256) {
        require(userAddress != address(0), "Invalid address");

        uint256 totalRewards = userReferralRewards[userAddress].totalRewards + userRewards[userAddress].totalRewards;

        return totalRewards;
    }

    function transferOwnership(address newAdmin) external onlyAdmin {
        require(newAdmin != address(0), "Invalid new admin address");
        admin = newAdmin;
    }

    function addToBlacklist(address user) public onlyAdmin {
        blacklist[user] = true;
    }

    function removeFromBlacklist(address user) public onlyAdmin {
        blacklist[user] = false;
    }

    function addToWhitelist(address user) public onlyAdmin {
        whitelist[user] = true;
    }

    function removeFromWhitelist(address user) public onlyAdmin {
        whitelist[user] = false;
    }

    function getTotalRewardsPerSecond(address user) public view returns (uint256) {
        uint256 totalRewards = userRewards[user].totalRewards;

        UserStaking[] storage stakes = userStaking[user];
        for (uint256 i = 0; i < stakes.length; i++) {
            if (block.timestamp > stakes[i].stakingEndTime) {
                uint256 stakingDuration = stakes[i].stakingEndTime - stakes[i].startDate;
                uint256 secondsSinceLastClaim = block.timestamp - stakes[i].lastClaimTime;

                // Calculate rewards per second and update total rewards
                uint256 rewardPerSecond = (stakes[i].stakedAmount * REWARD_PERCENTAGE_PER_SECOND) / 1e18;
                uint256 totalReward = rewardPerSecond * secondsSinceLastClaim;

                totalRewards += totalReward;
            }
        }

        return totalRewards;
    }
}
